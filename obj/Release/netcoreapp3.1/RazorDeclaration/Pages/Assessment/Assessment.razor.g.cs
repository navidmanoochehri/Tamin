// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Tamin.Pages.Assessment
{
    #line hidden
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Tamin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Tamin.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using System.Linq.Dynamic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Telerik.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Telerik.Blazor.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Telerik.Documents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Telerik.Windows.Documents.Spreadsheet.FormatProviders;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Telerik.Windows.Documents.Spreadsheet.FormatProviders.OpenXml.Xlsx;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Telerik.Windows.Documents.Spreadsheet.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using System.Collections;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Telerik.Windows.Documents.Spreadsheet.FormatProviders.Pdf;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Telerik.Windows.Documents.Spreadsheet.FormatProviders.TextBased.Csv;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Telerik.Windows.Documents.Spreadsheet.FormatProviders.TextBased.Txt;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Telerik.Windows.Documents.Spreadsheet.Utilities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Telerik.Documents.Common.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Tamin.DocumentProcessing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Telerik.DataSource;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Telerik.DataSource.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Tamin.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
using Tamin.Data.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/Assessment")]
    public partial class Assessment : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 701 "D:\Programming\Tamin-Telerik\Pages\Assessment\Assessment.razor"
       

    GridSelectionMode selectionMode { get; set; } = GridSelectionMode.Multiple;
    bool ShowSelectAll
    => selectionMode == GridSelectionMode.Multiple;
    public bool DeleteConfirm { get; set; }
    public bool isVisible { get; set; }
    public bool isVisible2 { get; set; }
    public bool isVisible3 { get; set; } = false;


    bool ExportAllPages { get; set; }
    public IEnumerable<VendorInPut> GridData = new List<VendorInPut>();
    public IEnumerable<AssessmentFC> GridFC = new List<AssessmentFC>();
    public IEnumerable<AssessmentFS> GridFS = new List<AssessmentFS>();
    public IEnumerable<AssessmentSC> GridSC = new List<AssessmentSC>();
    public IEnumerable<AssessmentSS> GridSS = new List<AssessmentSS>();
    public IList<INAssessmentFC> GridINFC = new List<INAssessmentFC>();
    public IList<INAssessmentFS> GridINFS = new List<INAssessmentFS>();
    public IList<INAssessmentSC> GridINSC = new List<INAssessmentSC>();
    public IList<INAssessmentSS> GridINSS = new List<INAssessmentSS>();
    public List<Projects> GridPJ = new List<Projects>();
    public List<string> project = new List<string>();
    public IEnumerable<VendorInPut> SelectedItems { get; set; } = new List<VendorInPut>();



    async Task show()
    {
        isVisible3 = false;
        await OnInitializedAsync();
    }



    protected override async Task OnInitializedAsync()

    {


        await LoadData();

    }

    async Task LoadData()
    {
        GridINFC = await _dbINAssessmentFC.GetINAssessmentFC();
        GridINFS = await _dbINAssessmentFS.GetINAssessmentFS();
        GridINSC = await _dbINAssessmentSC.GetINAssessmentSC();
        GridINSS = await _dbINAssessmentSS.GetINAssessmentSS();
        var vendors = await _dbVendorData.GetVendors();
        GridData = new ObservableCollection<VendorInPut>(vendors);
        var FC = await _dbAssessmentFCData.GetAssessmentFC();
        GridFC = new ObservableCollection<AssessmentFC>(FC);
        var FS = await _dbAssessmentFSData.GetAssessmentFS();
        GridFS = new ObservableCollection<AssessmentFS>(FS);
        var SC = await _dbAssessmentSCData.GetAssessmentSC();
        GridSC = new ObservableCollection<AssessmentSC>(SC);
        var SS = await _dbAssessmentSSData.GetAssessmentSS();
        GridSS = new ObservableCollection<AssessmentSS>(SS);
        GridPJ = await _dbProjectsData.GetProjects();
    }
    async Task OnStateInitHandler(GridStateEventArgs<VendorInPut> args)
    {
        var state = new GridState<VendorInPut>
        {
            SortDescriptors = new List<Telerik.DataSource.SortDescriptor>
{
                new Telerik.DataSource.SortDescriptor{ Member = "Date", SortDirection = Telerik.DataSource.ListSortDirection.Descending }
            },

        };

        args.GridState = state;
        await LoadData();
    }
    public async Task ShowWindow()
    {
        isVisible = true;
        StateHasChanged();
        await OnInitializedAsync();
    }

    public async Task Confirm()
    {
        DeleteConfirm = true;
        isVisible = false;
        await OnInitializedAsync();
        StateHasChanged();

    }

    public async Task CloseWindow()
    {
        DeleteConfirm = false;
        isVisible = false;
        await OnInitializedAsync();
        StateHasChanged();

    }

    private void Show()
    {
        isVisible3 = true;
    }


    void EditHandlerFC(GridCommandEventArgs args)
    {

        AssessmentFC item = (AssessmentFC)args.Item;
        var C = GridINFC.ToList();
        
        if (item.Financial==0) {
            C.RemoveAll(r=>r.Id==3);
        }
        if (item.Price==0) {
            C.RemoveAll(r=>r.Id==2);
        }
    
        if (item.Vendorlist==0) {
           C.RemoveAll(r=>r.Id==1);
        }

        var S = decimal.Divide((item.Financial + item.Price + item.Vendorlist), (C.Select(c=>c.Score).Sum()));
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";

        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }

        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }

    


    }

    async Task UpdateHandlerFC(GridCommandEventArgs args)
    {
        AssessmentFC item = (AssessmentFC)args.Item;
        var C = GridINFC.ToList();
        
        if (item.Financial==0) {
            C.RemoveAll(r=>r.Id==3);
        }
        if (item.Price==0) {
            C.RemoveAll(r=>r.Id==2);
        }
    
        if (item.Vendorlist==0) {
           C.RemoveAll(r=>r.Id==1);
        }

        var S = decimal.Divide((item.Financial + item.Price + item.Vendorlist), (C.Select(c=>c.Score).Sum()));
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";

        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }

        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }

        var NFC = GridINFC.Select(n => n.Score).ToList();

        if (0 <= item.Price && item.Price <= NFC.ElementAtOrDefault(1) && 0 <= item.Financial && item.Financial <= NFC.ElementAtOrDefault(2) && 0 <= item.Vendorlist && item.Vendorlist <= NFC.ElementAtOrDefault(0))
        {

            await _dbAssessmentFCData.UpdateAssessmentFC(item);
            DateTime dateAndTime = DateTime.Now;
            item.Date = (dateAndTime.ToString());
            await _dbAssessmentFCData.UpdateAssessmentFC(item);

        }
        else
        {
            isVisible2 = true;
            await Task.Delay(1000);
            isVisible2 = false;
        }
        await OnInitializedAsync();
    }

    private async Task DeleteHandlerFC(GridCommandEventArgs args)
    {
        await ShowWindow();

        await Task.Delay(4000);

        StateHasChanged();

        if (DeleteConfirm)
        {
            AssessmentFC item = (AssessmentFC)args.Item;
            await _dbAssessmentFCData.DeleteAssessmentFC(item);
        }

        DeleteConfirm = false;
        await OnInitializedAsync();

    }

    private async Task CreateHandlerFC(GridCommandEventArgs args)
    {
        AssessmentFC item = (AssessmentFC)args.Item;
        var C = GridINFC.ToList();
        
        if (item.Financial==0) {
            C.RemoveAll(r=>r.Id==3);
        }
        if (item.Price==0) {
            C.RemoveAll(r=>r.Id==2);
        }
    
        if (item.Vendorlist==0) {
           C.RemoveAll(r=>r.Id==1);
        }

        var S = decimal.Divide((item.Financial + item.Price + item.Vendorlist), (C.Select(c=>c.Score).Sum()));
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";

        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }
        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }
        DateTime dateAndTime = DateTime.Now;
        item.Date = (dateAndTime.ToString());

        item.Id = SelectedItems.Select(a => a.Id).FirstOrDefault();

        var NFC = GridINFC.Select(n => n.Score).ToList();

        if (0 <= item.Price && item.Price <= NFC.ElementAtOrDefault(1) && 0 <= item.Financial && item.Financial <= NFC.ElementAtOrDefault(2) && 0 <= item.Vendorlist && item.Vendorlist <= NFC.ElementAtOrDefault(0))
        {
            await _dbAssessmentFCData.InsertAssessmentFC(item);
            await OnInitializedAsync();
        }
        else
        {
            isVisible2 = true;
            await Task.Delay(1000);
            isVisible2 = false;
        }

    }

    private async Task CancelHandlerFC(GridCommandEventArgs args)
    {

        AssessmentFC item = (AssessmentFC)args.Item;
        await OnInitializedAsync();

    }
    void EditHandlerFS(GridCommandEventArgs args)
    {
        AssessmentFS item = (AssessmentFS)args.Item;
        var C = GridINFS.ToList();
        
        if (item.Financial==0) {
            C.RemoveAll(r=>r.Id ==3);
        }
        if (item.Price==0) {
            C.RemoveAll(r=>r.Id == 1);
        }
        if (item.Technical==0) {
           C.RemoveAll(r=>r.Id ==4);
        }
        if (item.CustomerOrientation ==0) {
           C.RemoveAll(r=>r.Id ==2);
        }

        var S = decimal.Divide((item.Financial + item.Price + item.CustomerOrientation + item.Technical), (C.Select(c=>c.Score).Sum()));
        
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";
        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }
        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }


    }

    async Task UpdateHandlerFS(GridCommandEventArgs args)
    {
        AssessmentFS item = (AssessmentFS)args.Item;
        var C = GridINFS.ToList();
        
        if (item.Financial==0) {
            C.RemoveAll(r=>r.Id ==3);
        }
        if (item.Price==0) {
            C.RemoveAll(r=>r.Id == 1);
        }
        if (item.Technical==0) {
           C.RemoveAll(r=>r.Id ==4);
        }
        if (item.CustomerOrientation ==0) {
           C.RemoveAll(r=>r.Id ==2);
        }
        
        var S = decimal.Divide((item.Financial + item.Price + item.CustomerOrientation + item.Technical), (C.Select(c=>c.Score).Sum()));
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";

        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }
        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }

        var NFS = GridINFS.Select(n => n.Score).ToList();
        if (0 <= item.Price && item.Price <= NFS.ElementAtOrDefault(0) && 0 <= item.Financial && item.Financial <= NFS.ElementAtOrDefault(2) && 0 <= item.CustomerOrientation && item.CustomerOrientation <= NFS.ElementAtOrDefault(1) && 0 <= item.Technical && item.Technical <= NFS.ElementAtOrDefault(3))
        {
            await _dbAssessmentFSData.UpdateAssessmentFS(item);
            DateTime dateAndTime = DateTime.Now;
            item.Date = (dateAndTime.ToString());
            await _dbAssessmentFSData.UpdateAssessmentFS(item);

        }
        else
        {
            isVisible2 = true;
            await Task.Delay(1000);
            isVisible2 = false;
        }
        await OnInitializedAsync();
    }

    private async Task DeleteHandlerFS(GridCommandEventArgs args)
    {
        await ShowWindow();

        await Task.Delay(3000);

        StateHasChanged();

        await Task.Delay(1000);

        StateHasChanged();

        if (DeleteConfirm)
        {
            AssessmentFS item = (AssessmentFS)args.Item;
            await _dbAssessmentFSData.DeleteAssessmentFS(item);
        }

        DeleteConfirm = false;
        await OnInitializedAsync();

    }

    private async Task CreateHandlerFS(GridCommandEventArgs args)
    {
        AssessmentFS item = (AssessmentFS)args.Item;
       var C = GridINFS.ToList();
        
        if (item.Financial==0) {
            C.RemoveAll(r=>r.Id ==3);
        }
        if (item.Price==0) {
            C.RemoveAll(r=>r.Id == 1);
        }
        if (item.Technical==0) {
           C.RemoveAll(r=>r.Id ==4);
        }
        if (item.CustomerOrientation ==0) {
           C.RemoveAll(r=>r.Id ==2);
        }
        
        var S = decimal.Divide((item.Financial + item.Price + item.CustomerOrientation + item.Technical), (C.Select(c=>c.Score).Sum()));
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";

        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }
        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }
        DateTime dateAndTime = DateTime.Now;
        item.Date = (dateAndTime.ToString());
        item.Id = SelectedItems.Select(a => a.Id).FirstOrDefault();
        var NFS = GridINFS.Select(n => n.Score).ToList();
        if (0 <= item.Price && item.Price <= NFS.ElementAtOrDefault(0) && 0 <= item.Financial && item.Financial <= NFS.ElementAtOrDefault(2) && 0 <= item.CustomerOrientation && item.CustomerOrientation <= NFS.ElementAtOrDefault(1) && 0 <= item.Technical && item.Technical <= NFS.ElementAtOrDefault(3))
        {
            await _dbAssessmentFSData.InsertAssessmentFS(item);
            await OnInitializedAsync();
        }
        else
        {

            isVisible2 = true;
            await Task.Delay(1000);
            isVisible2 = false;
        }

    }

    private async Task CancelHandlerFS(GridCommandEventArgs args)
    {

        AssessmentFS item = (AssessmentFS)args.Item;
        await OnInitializedAsync();

    }

    void EditHandlerSC(GridCommandEventArgs args)
    {

        AssessmentSC item = (AssessmentSC)args.Item;
        var C = GridINSC.ToList();
        
        if (item.Financial == 0) {
            C.RemoveAll(r=>r.Id == 6);
        }
        if (item.Price == 0) {
            C.RemoveAll(r=>r.Id == 3);
        }
        if (item.Delivery == 0) {
           C.RemoveAll(r=>r.Id == 4);
        }
        if (item.Quality == 0) {
           C.RemoveAll(r=>r.Id == 1);
        }
        if (item.CustomerOrientation == 0) {
           C.RemoveAll(r=>r.Id == 5);
        }
        if (item.Vendorlist == 0) {
           C.RemoveAll(r=>r.Id == 2);
        }

        var S = decimal.Divide((item.Financial + item.Price + item.CustomerOrientation + item.Delivery + item.Vendorlist + item.Quality), (C.Select(c=>c.Score).Sum()));   
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";

        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }
        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }

    }

    async Task UpdateHandlerSC(GridCommandEventArgs args)
    {
        AssessmentSC item = (AssessmentSC)args.Item;
        var C = GridINSC.ToList();
        
        if (item.Financial == 0) {
            C.RemoveAll(r=>r.Id == 6);
        }
        if (item.Price == 0) {
            C.RemoveAll(r=>r.Id == 3);
        }
        if (item.Delivery == 0) {
           C.RemoveAll(r=>r.Id == 4);
        }
        if (item.Quality == 0) {
           C.RemoveAll(r=>r.Id == 1);
        }
        if (item.CustomerOrientation == 0) {
           C.RemoveAll(r=>r.Id == 5);
        }
        if (item.Vendorlist == 0) {
           C.RemoveAll(r=>r.Id == 2);
        }

        var S = decimal.Divide((item.Financial + item.Price + item.CustomerOrientation + item.Delivery + item.Vendorlist + item.Quality), (C.Select(c=>c.Score).Sum()));
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";

        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }
        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }

        var NSC = GridINSC.Select(n => n.Score).ToList();
        if (0 <= item.Quality && item.Quality <= NSC.ElementAtOrDefault(0) && 0 <= item.Vendorlist && item.Vendorlist <= NSC.ElementAtOrDefault(1) && 0 <= item.Price && item.Price <= NSC.ElementAtOrDefault(2) && 0 <= item.Delivery && item.Delivery <= NSC.ElementAtOrDefault(3) && 0 <= item.CustomerOrientation && item.CustomerOrientation <= NSC.ElementAtOrDefault(4) && 0 <= item.Financial && item.Financial <= NSC.ElementAtOrDefault(5))
        {
            await _dbAssessmentSCData.UpdateAssessmentSC(item);
            DateTime dateAndTime = DateTime.Now;
            item.Date = (dateAndTime.ToString());
            await _dbAssessmentSCData.UpdateAssessmentSC(item);

        }
        else
        {
            isVisible2 = true;
            await Task.Delay(1000);
            isVisible2 = false;
        }
        await OnInitializedAsync();
    }

    private async Task DeleteHandlerSC(GridCommandEventArgs args)
    {
        await ShowWindow();

        await Task.Delay(3000);

        StateHasChanged();

        await Task.Delay(1000);

        StateHasChanged();

        if (DeleteConfirm)
        {
            AssessmentSC item = (AssessmentSC)args.Item;
            await _dbAssessmentSCData.DeleteAssessmentSC(item);
        }

        DeleteConfirm = false;
        await OnInitializedAsync();
    }

    private async Task CreateHandlerSC(GridCommandEventArgs args)
    {
        AssessmentSC item = (AssessmentSC)args.Item;
        var C = GridINSC.ToList();
        
        if (item.Financial == 0) {
            C.RemoveAll(r=>r.Id == 6);
        }
        if (item.Price == 0) {
            C.RemoveAll(r=>r.Id == 3);
        }
        if (item.Delivery == 0) {
           C.RemoveAll(r=>r.Id == 4);
        }
        if (item.Quality == 0) {
           C.RemoveAll(r=>r.Id == 1);
        }
        if (item.CustomerOrientation == 0) {
           C.RemoveAll(r=>r.Id == 5);
        }
        if (item.Vendorlist == 0) {
           C.RemoveAll(r=>r.Id == 2);
        }

        var S = decimal.Divide((item.Financial + item.Price + item.CustomerOrientation + item.Delivery + item.Vendorlist + item.Quality), (C.Select(c=>c.Score).Sum()));
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";

        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }
        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }
        DateTime dateAndTime = DateTime.Now;
        item.Date = (dateAndTime.ToString()); ;
        item.Id = SelectedItems.Select(a => a.Id).FirstOrDefault();
        var NSC = GridINSC.Select(n => n.Score).ToList();
        if (0 <= item.Quality && item.Quality <= NSC.ElementAtOrDefault(0) && 0 <= item.Vendorlist && item.Vendorlist <= NSC.ElementAtOrDefault(1) && 0 <= item.Price && item.Price <= NSC.ElementAtOrDefault(2) && 0 <= item.Delivery && item.Delivery <= NSC.ElementAtOrDefault(3) && 0 <= item.CustomerOrientation && item.CustomerOrientation <= NSC.ElementAtOrDefault(4) && 0 <= item.Financial && item.Financial <= NSC.ElementAtOrDefault(5))
        {
            await _dbAssessmentSCData.InsertAssessmentSC(item);
            await OnInitializedAsync();
        }
        else
        {
            isVisible2 = true;
            await Task.Delay(1000);
            isVisible2 = false;
        }

    }

    private async Task CancelHandlerSC(GridCommandEventArgs args)
    {

        AssessmentSC item = (AssessmentSC)args.Item;
        await OnInitializedAsync();

    }
    void EditHandlerSS(GridCommandEventArgs args)
    {

        AssessmentSS item = (AssessmentSS)args.Item;
        var C = GridINSS.ToList();
        
        if (item.Financial == 0) {
            C.RemoveAll(r=>r.Id == 5);
        }
        if (item.Price == 0) {
            C.RemoveAll(r=>r.Id == 2);
        }
        if (item.Delivery == 0) {
           C.RemoveAll(r=>r.Id == 3);
        }
        if (item.Quality == 0) {
           C.RemoveAll(r=>r.Id == 1);
        }
        if (item.CustomerOrientation == 0) {
           C.RemoveAll(r=>r.Id == 4);
        }
        if (item.Technical == 0) {
           C.RemoveAll(r=>r.Id == 6);
        }
        if (item.HSE_QC == 0) {
           C.RemoveAll(r=>r.Id == 7);
        }

        var S = decimal.Divide((item.Financial + item.Price + item.CustomerOrientation + item.Delivery + item.HSE_QC + item.Quality + item.Technical), (C.Select(c=>c.Score).Sum()));
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";

        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }
        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }

    }

    async Task UpdateHandlerSS(GridCommandEventArgs args)
    {
        AssessmentSS item = (AssessmentSS)args.Item;
        var C = GridINSS.ToList();
        
        if (item.Financial == 0) {
            C.RemoveAll(r=>r.Id == 5);
        }
        if (item.Price == 0) {
            C.RemoveAll(r=>r.Id == 2);
        }
        if (item.Delivery == 0) {
           C.RemoveAll(r=>r.Id == 3);
        }
        if (item.Quality == 0) {
           C.RemoveAll(r=>r.Id == 1);
        }
        if (item.CustomerOrientation == 0) {
           C.RemoveAll(r=>r.Id == 4);
        }
        if (item.Technical == 0) {
           C.RemoveAll(r=>r.Id == 6);
        }
        if (item.HSE_QC == 0) {
           C.RemoveAll(r=>r.Id == 7);
        }

        var S = decimal.Divide((item.Financial + item.Price + item.CustomerOrientation + item.Delivery + item.HSE_QC + item.Quality + item.Technical), (C.Select(c=>c.Score).Sum()));
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";

        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }
        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }

        item.Id = SelectedItems.Select(a => a.Id).FirstOrDefault();
        var NSS = GridINSS.Select(n => n.Score).ToList();
        if (0 <= item.Quality && item.Quality <= NSS.ElementAtOrDefault(0) && 0 <= item.Price && item.Price <= NSS.ElementAtOrDefault(1) && 0 <= item.Delivery && item.Delivery <= NSS.ElementAtOrDefault(2) && 0 <= item.CustomerOrientation && item.CustomerOrientation <= NSS.ElementAtOrDefault(3) && 0 <= item.Financial && item.Financial <= NSS.ElementAtOrDefault(4) && 0 <= item.Technical && item.Technical <= NSS.ElementAtOrDefault(5) && 0 <= item.HSE_QC && item.HSE_QC <= NSS.ElementAtOrDefault(6))
        {
            await _dbAssessmentSSData.UpdateAssessmentSS(item);
            DateTime dateAndTime = DateTime.Now;
            item.Date = (dateAndTime.ToString());
            await _dbAssessmentSSData.UpdateAssessmentSS(item);

        }
        else
        {
            isVisible2 = true;
            await Task.Delay(1000);
            isVisible2 = false;
        }
        await OnInitializedAsync();
    }

    private async Task DeleteHandlerSS(GridCommandEventArgs args)
    {
        await ShowWindow();

        await Task.Delay(3000);

        StateHasChanged();

        await Task.Delay(1000);

        StateHasChanged();

        if (DeleteConfirm)
        {
            AssessmentSS item = (AssessmentSS)args.Item;
            await _dbAssessmentSSData.DeleteAssessmentSS(item);
        }

        DeleteConfirm = false;
        await OnInitializedAsync();
    }

    private async Task CreateHandlerSS(GridCommandEventArgs args)
    {
        AssessmentSS item = (AssessmentSS)args.Item;
        var C = GridINSS.ToList();
        
        if (item.Financial == 0) {
            C.RemoveAll(r=>r.Id == 5);
        }
        if (item.Price == 0) {
            C.RemoveAll(r=>r.Id == 2);
        }
        if (item.Delivery == 0) {
           C.RemoveAll(r=>r.Id == 3);
        }
        if (item.Quality == 0) {
           C.RemoveAll(r=>r.Id == 1);
        }
        if (item.CustomerOrientation == 0) {
           C.RemoveAll(r=>r.Id == 4);
        }
        if (item.Technical == 0) {
           C.RemoveAll(r=>r.Id == 6);
        }
        if (item.HSE_QC == 0) {
           C.RemoveAll(r=>r.Id == 7);
        }

        var S = decimal.Divide((item.Financial + item.Price + item.CustomerOrientation + item.Delivery + item.HSE_QC + item.Quality + item.Technical), (C.Select(c=>c.Score).Sum()));
        item.Sum = Convert.ToInt32(S * 100);
        if (item.Sum >= 70)
        {
            item.Grade = "A";

        }
        else if ((item.Sum < 70) && (item.Sum >= 50))
        {
            item.Grade = "B";
        }
        else
        {
            item.Grade = "C";
        }
        var p = string.Join(" , ", project.ToList());
        if (p != "")
        {
            item.Project = p;
        }
        DateTime dateAndTime = DateTime.Now;
        item.Date = (dateAndTime.ToString());
        item.Id = SelectedItems.Select(a => a.Id).FirstOrDefault();
        var NSS = GridINSS.Select(n => n.Score).ToList();
        if (0 <= item.Quality && item.Quality <= NSS.ElementAtOrDefault(0) && 0 <= item.Price && item.Price <= NSS.ElementAtOrDefault(1) && 0 <= item.Delivery && item.Delivery <= NSS.ElementAtOrDefault(2) && 0 <= item.CustomerOrientation && item.CustomerOrientation <= NSS.ElementAtOrDefault(3) && 0 <= item.Financial && item.Financial <= NSS.ElementAtOrDefault(4) && 0 <= item.Technical && item.Technical <= NSS.ElementAtOrDefault(5) && 0 <= item.HSE_QC && item.HSE_QC <= NSS.ElementAtOrDefault(6))
        {
            await _dbAssessmentSSData.InsertAssessmentSS(item);
            await OnInitializedAsync();
        }
        else
        {
            isVisible2 = true;
            await Task.Delay(1000);
            isVisible2 = false;
        }

    }

    private async Task CancelHandlerSS(GridCommandEventArgs args)
    {

        AssessmentSS item = (AssessmentSS)args.Item;
        await OnInitializedAsync();

    }
    void ClearSelection(ChangeEventArgs e)
    {
        Enum.TryParse(e.Value.ToString(), out GridSelectionMode chosenMode);
        selectionMode = chosenMode;

        if (chosenMode == GridSelectionMode.Single)
        {
            VendorInPut selectedItem = null;
            if (SelectedItems.Count() > 0)
            {
                selectedItem = SelectedItems.First();
            }
            var TempItems = new List<VendorInPut>();
            if (selectedItem != null)
            {
                TempItems.Add(selectedItem);
            }
            SelectedItems = TempItems.AsEnumerable<VendorInPut>();
        }
    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProjectsData _dbProjectsData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IINAssessmentSSData _dbINAssessmentSS { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IINAssessmentSCData _dbINAssessmentSC { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IINAssessmentFSData _dbINAssessmentFS { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IINAssessmentFCData _dbINAssessmentFC { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAssessmentSSData _dbAssessmentSSData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAssessmentSCData _dbAssessmentSCData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAssessmentFSData _dbAssessmentFSData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAssessmentFCData _dbAssessmentFCData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IActivityData _dbActivityData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IVendorData _dbVendorData { get; set; }
    }
}
#pragma warning restore 1591
