// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Tamin.Pages.Vendors
{
    #line hidden
    using System;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Tamin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Tamin.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Tamin.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using System.Linq.Dynamic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Telerik.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Telerik.Blazor.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Programming\Tamin-Telerik\Pages\_Imports.razor"
using Telerik.Documents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Programming\Tamin-Telerik\Pages\Vendors\EditU.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Programming\Tamin-Telerik\Pages\Vendors\EditU.razor"
using Telerik.Windows.Documents.Spreadsheet.FormatProviders.Pdf;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Programming\Tamin-Telerik\Pages\Vendors\EditU.razor"
using Telerik.Windows.Documents.Spreadsheet.FormatProviders.TextBased.Csv;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Programming\Tamin-Telerik\Pages\Vendors\EditU.razor"
using Telerik.Windows.Documents.Spreadsheet.FormatProviders.TextBased.Txt;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Programming\Tamin-Telerik\Pages\Vendors\EditU.razor"
using Telerik.Windows.Documents.Spreadsheet.Utilities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Programming\Tamin-Telerik\Pages\Vendors\EditU.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Programming\Tamin-Telerik\Pages\Vendors\EditU.razor"
using Telerik.DataSource.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Programming\Tamin-Telerik\Pages\Vendors\EditU.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/EditUsers")]
    public partial class EditU : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 124 "D:\Programming\Tamin-Telerik\Pages\Vendors\EditU.razor"
       

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Admin";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    public bool DeleteConfirm { get; set; }
    public bool isVisible { get; set; }


    protected override async Task OnInitializedAsync()
    {

        GetUsers();


        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }
        // Ensure a user named Admin@BlazorHelpWebsite.com is an Administrator
        var user = await _UserManager.FindByNameAsync("Admin");
        if (user != null)
        {
            // Is Admin@BlazorHelpWebsite.com in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }
        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;

    }

    // Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";
    bool CurrentUserConfirme { get; set; } = false;
    // Collection to display the existing users
    List<IdentityUser>
        ColUsers = new List<IdentityUser>
            ();
    List<IdentityRole>
        ColRoles = new List<IdentityRole>
            ();
    // Options to display in the roles dropdown when editing a user
    List<string>
        Options = new List<string> () { "Users", "Admin" };
    bool Confirme = new bool();
    // To hold any possible errors
    string strError = "";
    // To enable showing the Popup


    public void GetUsers()
    {
        // clear any error messages
        strError = "";
        // Collection to hold users
        ColUsers = new List<IdentityUser>
            ();
        ColRoles = new List<IdentityRole>
            ();
        // get users from __UserManager
        var user = _UserManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "*****",
            EmailConfirmed=x.EmailConfirmed
        });

        foreach (var item in user)
        {
            ColUsers.Add(item);
        }

    }


    async Task EditHandler(GridCommandEventArgs args)
    {
        IdentityUser item = (IdentityUser)args.Item;
        // Get the user
        var user = await _UserManager.FindByIdAsync(item.Id);
        if (user != null)
        {
            // Is user in administrator role?
            var UserResult =
            await _UserManager
            .IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (UserResult)
            {
                CurrentUserRole = ADMINISTRATION_ROLE;

            }
            else
            {
                CurrentUserRole = "Users";

            }

            CurrentUserConfirme = user.EmailConfirmed;
        }
    }

    async Task UpdateHandler(GridCommandEventArgs args)
    {
        IdentityUser item = (IdentityUser)args.Item;
        // Get the user

        var user = await _UserManager.FindByIdAsync(item.Id);
        // Update Email

        user.Email = item.Email;
        // Update the user

        item.EmailConfirmed = CurrentUserConfirme;
        user.EmailConfirmed = item.EmailConfirmed;


        await _UserManager.UpdateAsync(user);
        // Only update password if the current value
        // is not the default value
        if (item.PasswordHash != "*****")
        {
            var resetToken =
            await _UserManager.GeneratePasswordResetTokenAsync(user);
            var passworduser =
            await _UserManager.ResetPasswordAsync(
            user,
            resetToken,
            item.PasswordHash);
            if (!passworduser.Succeeded)
            {
                if (passworduser.Errors.FirstOrDefault() != null)
                {
                    strError =
                    passworduser
                    .Errors
                    .FirstOrDefault()
                    .Description;
                }
                else
                {
                    strError = "Pasword error";
                }
            }

        }
        // Handle Roles
        // Is user in administrator role?
        var UserResult =
        await _UserManager
        .IsInRoleAsync(user, ADMINISTRATION_ROLE);
        // Is Administrator role selected
        // but user is not an Administrator?
        if (
        (CurrentUserRole == ADMINISTRATION_ROLE)
        &
        (!UserResult))
        {
            // Put admin in Administrator role
            await _UserManager
            .AddToRoleAsync(user, ADMINISTRATION_ROLE);
        }
        else
        {
            // Is Administrator role not selected
            // but user is an Administrator?
            if ((CurrentUserRole != ADMINISTRATION_ROLE)
            &
            (UserResult))
            {
                // Remove user from Administrator role
                await _UserManager
                .RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }

    }

    async Task CreateHandler(GridCommandEventArgs args)
    {
        IdentityUser item = (IdentityUser)args.Item;
        // Make new user
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        // Set Id to blank so we know it is a new record
        objUser.Id = "";
        objUser.EmailConfirmed = false;
        // Open the Popup
        await OnInitializedAsync();

    }

    public async Task DeleteHandler(GridCommandEventArgs args)

    {
        await ShowWindow();

        await Task.Delay(3000);

        StateHasChanged();

        await Task.Delay(1000);

        StateHasChanged();

        if (DeleteConfirm)
        {
            IdentityUser item = (IdentityUser)args.Item;
            // Get the user
            var user = await _UserManager.FindByIdAsync(item.Id);
            if (user != null)
            {
                // Delete the user
                await _UserManager.DeleteAsync(user);
            }
            // Refresh Users
        }

        DeleteConfirm = false;
        StateHasChanged();
        await OnInitializedAsync();

    }

    public async Task ShowWindow()
    {
        isVisible = true;
        await OnInitializedAsync();
        StateHasChanged();

    }

    public async Task Confirm()
    {
        DeleteConfirm = true;
        isVisible = false;
        await OnInitializedAsync();
        StateHasChanged();
        return;
    }

    public async Task CloseWindow()
    {
        DeleteConfirm = false;
        isVisible = false;
        await OnInitializedAsync();
        StateHasChanged();
        return;
    }
    async Task CancelHandler(GridCommandEventArgs args)
    {
        await Task.Delay(500); //simulate actual long running async operation
    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private RoleManager<IdentityRole> _RoleManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<IdentityUser> _UserManager { get; set; }
    }
}
#pragma warning restore 1591
